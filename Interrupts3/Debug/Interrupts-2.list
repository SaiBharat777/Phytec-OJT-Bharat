
Interrupts-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003cc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000564  08000564  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000564  08000564  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000564  08000564  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000564  08000564  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000564  08000564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800056c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000570  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000570  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c1c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000070f  00000000  00000000  00021c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00022360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c0  00000000  00000000  00022578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014100  00000000  00000000  00022738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002614  00000000  00000000  00036838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000806f2  00000000  00000000  00038e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b953e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000650  00000000  00000000  000b9590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800054c 	.word	0x0800054c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800054c 	.word	0x0800054c

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	; (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <pc13_exti_init>:
#define LINE13    (1U<<13)
#define GPIOCEN   (1U<<2)
#define SYSCFGEN  (1U<<14)

void pc13_exti_init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000218:	b672      	cpsid	i
}
 800021a:	bf00      	nop
	/*Disable global variable*/
	__disable_irq();

	/*Enable Cloack access for GPIOC*/
	RCC->AHB1ENR |= GPIOCEN;
 800021c:	4b15      	ldr	r3, [pc, #84]	; (8000274 <pc13_exti_init+0x60>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000220:	4a14      	ldr	r2, [pc, #80]	; (8000274 <pc13_exti_init+0x60>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PC13 as input*/
	GPIOC->MODER &= ~(3U<<26);
 8000228:	4b13      	ldr	r3, [pc, #76]	; (8000278 <pc13_exti_init+0x64>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a12      	ldr	r2, [pc, #72]	; (8000278 <pc13_exti_init+0x64>)
 800022e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000232:	6013      	str	r3, [r2, #0]

	/*Enable clock access for SYSCFGEN*/
	RCC->APB2ENR |= SYSCFGEN;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <pc13_exti_init+0x60>)
 8000236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <pc13_exti_init+0x60>)
 800023a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800023e:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTC for EXTI13*/
	SYSCFG->EXTICR[3] |= (1U<<5);
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <pc13_exti_init+0x68>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <pc13_exti_init+0x68>)
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	6153      	str	r3, [r2, #20]

	/*Unmask EXTI13*/
	EXTI->IMR |= (1U<<13);
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <pc13_exti_init+0x6c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <pc13_exti_init+0x6c>)
 8000252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000256:	6013      	str	r3, [r2, #0]

	/*Select falling edge trigger*/
	EXTI->FTSR |= (1U<<13);
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <pc13_exti_init+0x6c>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <pc13_exti_init+0x6c>)
 800025e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000262:	60d3      	str	r3, [r2, #12]

	/*Enable EXTI13 in NVIC*/
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000264:	2028      	movs	r0, #40	; 0x28
 8000266:	f7ff ffb7 	bl	80001d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800026a:	b662      	cpsie	i
}
 800026c:	bf00      	nop



	/*Enable global interrupts*/
	__enable_irq();
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020800 	.word	0x40020800
 800027c:	40013800 	.word	0x40013800
 8000280:	40013c00 	.word	0x40013c00

08000284 <exti_callback>:

static void exti_callback(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	GPIOA->ODR ^=LED;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <exti_callback+0x1c>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <exti_callback+0x1c>)
 800028e:	f083 0320 	eor.w	r3, r3, #32
 8000292:	6153      	str	r3, [r2, #20]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40020000 	.word	0x40020000

080002a4 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	if((EXTI->PR & LINE13)!=0)
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <EXTI15_10_IRQHandler+0x40>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d011      	beq.n	80002da <EXTI15_10_IRQHandler+0x36>
	{
		/*Clear PR flag*/
		EXTI->PR |=LINE13;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <EXTI15_10_IRQHandler+0x40>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <EXTI15_10_IRQHandler+0x40>)
 80002bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c0:	6153      	str	r3, [r2, #20]
		for(uint32_t j = 0; j < 500000; j++){}
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e002      	b.n	80002ce <EXTI15_10_IRQHandler+0x2a>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <EXTI15_10_IRQHandler+0x44>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d9f8      	bls.n	80002c8 <EXTI15_10_IRQHandler+0x24>
		//Do something...
		exti_callback();
 80002d6:	f7ff ffd5 	bl	8000284 <exti_callback>

	}

}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40013c00 	.word	0x40013c00
 80002e8:	0007a11f 	.word	0x0007a11f

080002ec <uart2_init>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

	/****************Configure uart gpio pin***************/
		/*Enable clock access to gpioa */
		RCC->AHB1ENR |= GPIOAEN;
 80002f0:	4b14      	ldr	r3, [pc, #80]	; (8000344 <uart2_init+0x58>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <uart2_init+0x58>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30

		/*Set PA2 mode to alternate function mode*/
		GPIOA->MODER  |= PA2MOD;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <uart2_init+0x5c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <uart2_init+0x5c>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6013      	str	r3, [r2, #0]

		/*Set PA2 alternate function type to UART_TX (AF07)*/
        GPIOA->AFR[0] |= PA2AF;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <uart2_init+0x5c>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <uart2_init+0x5c>)
 800030e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000312:	6213      	str	r3, [r2, #32]

		/****************Configure uart module ***************/
		/*Enable clock access to uart2 */
         RCC->APB1ENR |= APB1EN;
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <uart2_init+0x58>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000318:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <uart2_init+0x58>)
 800031a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031e:	6413      	str	r3, [r2, #64]	; 0x40

		/*Configure baudrate*/
		uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000324:	4909      	ldr	r1, [pc, #36]	; (800034c <uart2_init+0x60>)
 8000326:	480a      	ldr	r0, [pc, #40]	; (8000350 <uart2_init+0x64>)
 8000328:	f000 f814 	bl	8000354 <uart_set_baudrate>
		//USART2->BRR = ((APB1_CLK + (BaudRate/2U))/BaudRate) ;

		/*Configure the transfer direction*/
		USART2->CR1 = USART2_TX;
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <uart2_init+0x64>)
 800032e:	2208      	movs	r2, #8
 8000330:	60da      	str	r2, [r3, #12]

		/*Enable uart module*/
        USART2->CR1 |= USART2EN;
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <uart2_init+0x64>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	4a06      	ldr	r2, [pc, #24]	; (8000350 <uart2_init+0x64>)
 8000338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033c:	60d3      	str	r3, [r2, #12]

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40023800 	.word	0x40023800
 8000348:	40020000 	.word	0x40020000
 800034c:	00f42400 	.word	0x00f42400
 8000350:	40004400 	.word	0x40004400

08000354 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000360:	6879      	ldr	r1, [r7, #4]
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f000 f808 	bl	8000378 <compute_uart_bd>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	609a      	str	r2, [r3, #8]
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	085a      	lsrs	r2, r3, #1
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	441a      	add	r2, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000390:	b29b      	uxth	r3, r3
}
 8000392:	4618      	mov	r0, r3
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <uart2_write>:


void uart2_write(int ch)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80003a8:	bf00      	nop
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <uart2_write+0x2c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f9      	beq.n	80003aa <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <uart2_write+0x2c>)
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	6053      	str	r3, [r2, #4]

	//for(uint32_t j = 0; j < 500000; j++){}
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40004400 	.word	0x40004400

080003d0 <main>:
#include"exti.h"

int main()
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	/*1.Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <main+0x38>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <main+0x38>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6313      	str	r3, [r2, #48]	; 0x30

	/*2.Set PA5 as output pin*/
	GPIOA->MODER |= (1U<<10);
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <main+0x3c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a09      	ldr	r2, [pc, #36]	; (800040c <main+0x3c>)
 80003e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <main+0x3c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <main+0x3c>)
 80003f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003f6:	6013      	str	r3, [r2, #0]


	uart2_init();
 80003f8:	f7ff ff78 	bl	80002ec <uart2_init>

	pc13_exti_init();
 80003fc:	f7ff ff0a 	bl	8000214 <pc13_exti_init>

		while(1)
			{
				uart2_write('y');
 8000400:	2079      	movs	r0, #121	; 0x79
 8000402:	f7ff ffcd 	bl	80003a0 <uart2_write>
 8000406:	e7fb      	b.n	8000400 <main+0x30>
 8000408:	40023800 	.word	0x40023800
 800040c:	40020000 	.word	0x40020000

08000410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <NMI_Handler+0x4>

08000416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <MemManage_Handler+0x4>

08000422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <UsageFault_Handler+0x4>

0800042e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045c:	f000 f83e 	bl	80004dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <SystemInit+0x20>)
 800046a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800046e:	4a05      	ldr	r2, [pc, #20]	; (8000484 <SystemInit+0x20>)
 8000470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	e000ed00 	.word	0xe000ed00

08000488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800048e:	490e      	ldr	r1, [pc, #56]	; (80004c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000490:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000494:	e002      	b.n	800049c <LoopCopyDataInit>

08000496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049a:	3304      	adds	r3, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800049c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a0:	d3f9      	bcc.n	8000496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004a4:	4c0b      	ldr	r4, [pc, #44]	; (80004d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a8:	e001      	b.n	80004ae <LoopFillZerobss>

080004aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ac:	3204      	adds	r2, #4

080004ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b0:	d3fb      	bcc.n	80004aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004b2:	f7ff ffd7 	bl	8000464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004b6:	f000 f825 	bl	8000504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ba:	f7ff ff89 	bl	80003d0 <main>
  bx  lr    
 80004be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004cc:	0800056c 	.word	0x0800056c
  ldr r2, =_sbss
 80004d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004d4:	20000024 	.word	0x20000024

080004d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC_IRQHandler>
	...

080004dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_IncTick+0x20>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_IncTick+0x24>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <HAL_IncTick+0x24>)
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000020 	.word	0x20000020

08000504 <__libc_init_array>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	4d0d      	ldr	r5, [pc, #52]	; (800053c <__libc_init_array+0x38>)
 8000508:	4c0d      	ldr	r4, [pc, #52]	; (8000540 <__libc_init_array+0x3c>)
 800050a:	1b64      	subs	r4, r4, r5
 800050c:	10a4      	asrs	r4, r4, #2
 800050e:	2600      	movs	r6, #0
 8000510:	42a6      	cmp	r6, r4
 8000512:	d109      	bne.n	8000528 <__libc_init_array+0x24>
 8000514:	4d0b      	ldr	r5, [pc, #44]	; (8000544 <__libc_init_array+0x40>)
 8000516:	4c0c      	ldr	r4, [pc, #48]	; (8000548 <__libc_init_array+0x44>)
 8000518:	f000 f818 	bl	800054c <_init>
 800051c:	1b64      	subs	r4, r4, r5
 800051e:	10a4      	asrs	r4, r4, #2
 8000520:	2600      	movs	r6, #0
 8000522:	42a6      	cmp	r6, r4
 8000524:	d105      	bne.n	8000532 <__libc_init_array+0x2e>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	f855 3b04 	ldr.w	r3, [r5], #4
 800052c:	4798      	blx	r3
 800052e:	3601      	adds	r6, #1
 8000530:	e7ee      	b.n	8000510 <__libc_init_array+0xc>
 8000532:	f855 3b04 	ldr.w	r3, [r5], #4
 8000536:	4798      	blx	r3
 8000538:	3601      	adds	r6, #1
 800053a:	e7f2      	b.n	8000522 <__libc_init_array+0x1e>
 800053c:	08000564 	.word	0x08000564
 8000540:	08000564 	.word	0x08000564
 8000544:	08000564 	.word	0x08000564
 8000548:	08000568 	.word	0x08000568

0800054c <_init>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	bf00      	nop
 8000550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000552:	bc08      	pop	{r3}
 8000554:	469e      	mov	lr, r3
 8000556:	4770      	bx	lr

08000558 <_fini>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr
