
Board to boardFullDuplex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000524  08000524  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000524  08000524  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000524  08000524  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000524  08000524  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800052c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000530  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000530  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017ec  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000646  00000000  00000000  00021820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00021e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00022070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ce8  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002785  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084364  00000000  00000000  0003968d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd9f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000060c  00000000  00000000  000bda44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800050c 	.word	0x0800050c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800050c 	.word	0x0800050c

080001d8 <main>:
#define GPIOA5		(1U<<5)
#define LED_PIN		GPIOA5
char key;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 80001dc:	f000 f872 	bl	80002c4 <uart2_rxtx_init>

	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <main+0x68>)
 80001e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e4:	4a16      	ldr	r2, [pc, #88]	; (8000240 <main+0x68>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PA5 as output pin
	GPIOA->MODER |= (1U<<10);
 80001ec:	4b15      	ldr	r3, [pc, #84]	; (8000244 <main+0x6c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a14      	ldr	r2, [pc, #80]	; (8000244 <main+0x6c>)
 80001f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80001f8:	4b12      	ldr	r3, [pc, #72]	; (8000244 <main+0x6c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a11      	ldr	r2, [pc, #68]	; (8000244 <main+0x6c>)
 80001fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000202:	6013      	str	r3, [r2, #0]

	while(1)
	{
		key = uart2_read();
 8000204:	f000 f8ce 	bl	80003a4 <uart2_read>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <main+0x70>)
 800020e:	701a      	strb	r2, [r3, #0]
		uart2_write(key);
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <main+0x70>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f8d9 	bl	80003cc <uart2_write>

		if(key == '1')
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x70>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b31      	cmp	r3, #49	; 0x31
 8000220:	d106      	bne.n	8000230 <main+0x58>
		{
			GPIOA->ODR |= LED_PIN;
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x6c>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <main+0x6c>)
 8000228:	f043 0320 	orr.w	r3, r3, #32
 800022c:	6153      	str	r3, [r2, #20]
 800022e:	e7e9      	b.n	8000204 <main+0x2c>
		}
		else
		{
			GPIOA->ODR &= ~LED_PIN;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <main+0x6c>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <main+0x6c>)
 8000236:	f023 0320 	bic.w	r3, r3, #32
 800023a:	6153      	str	r3, [r2, #20]
		key = uart2_read();
 800023c:	e7e2      	b.n	8000204 <main+0x2c>
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40020000 	.word	0x40020000
 8000248:	20000020 	.word	0x20000020

0800024c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000250:	e7fe      	b.n	8000250 <NMI_Handler+0x4>

08000252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000252:	b480      	push	{r7}
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000256:	e7fe      	b.n	8000256 <HardFault_Handler+0x4>

08000258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800025c:	e7fe      	b.n	800025c <MemManage_Handler+0x4>

0800025e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800025e:	b480      	push	{r7}
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000262:	e7fe      	b.n	8000262 <BusFault_Handler+0x4>

08000264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000268:	e7fe      	b.n	8000268 <UsageFault_Handler+0x4>

0800026a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000298:	f000 f900 	bl	800049c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x20>)
 80002a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002aa:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <SystemInit+0x20>)
 80002ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <uart2_rxtx_init>:
	uart2_write(ch);
	return ch;
}

void uart2_rxtx_init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	/*****configure uart gpiio pin*******/

	//Enable clock access to gpioa
	RCC->AHB1ENR |= GPIOAEN;
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <uart2_rxtx_init+0xd0>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <uart2_rxtx_init+0xd0>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30

	//set pa2 mode to alternate function mode
	GPIOA->MODER &= ~(1U<<4);
 80002d4:	4b30      	ldr	r3, [pc, #192]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002da:	f023 0310 	bic.w	r3, r3, #16
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002e0:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a2c      	ldr	r2, [pc, #176]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6013      	str	r3, [r2, #0]

	//set pa2 alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<8);
 80002ec:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a29      	ldr	r2, [pc, #164]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80002f8:	4b27      	ldr	r3, [pc, #156]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	4a26      	ldr	r2, [pc, #152]	; (8000398 <uart2_rxtx_init+0xd4>)
 80002fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000302:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a23      	ldr	r2, [pc, #140]	; (8000398 <uart2_rxtx_init+0xd4>)
 800030a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a20      	ldr	r2, [pc, #128]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800031a:	6213      	str	r3, [r2, #32]

	//Set pa3 mode to alternate function mode
	GPIOA->MODER &= ~(1U<<6);
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <uart2_rxtx_init+0xd4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000326:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <uart2_rxtx_init+0xd4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <uart2_rxtx_init+0xd4>)
 800032e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000332:	6013      	str	r3, [r2, #0]

	//Set pa3 alternate function type to UART_RX (AF07)
	GPIOA->AFR[0] |= (1U<<12);
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000336:	6a1b      	ldr	r3, [r3, #32]
 8000338:	4a17      	ldr	r2, [pc, #92]	; (8000398 <uart2_rxtx_init+0xd4>)
 800033a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a14      	ldr	r2, [pc, #80]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <uart2_rxtx_init+0xd4>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a11      	ldr	r2, [pc, #68]	; (8000398 <uart2_rxtx_init+0xd4>)
 8000352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000356:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <uart2_rxtx_init+0xd4>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <uart2_rxtx_init+0xd4>)
 800035e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000362:	6213      	str	r3, [r2, #32]

	/******configure uart module **********/

	//Enable clock access uart2
	RCC->APB1ENR |= UART2EN;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <uart2_rxtx_init+0xd0>)
 8000366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000368:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <uart2_rxtx_init+0xd0>)
 800036a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036e:	6413      	str	r3, [r2, #64]	; 0x40

	//Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	4909      	ldr	r1, [pc, #36]	; (800039c <uart2_rxtx_init+0xd8>)
 8000376:	480a      	ldr	r0, [pc, #40]	; (80003a0 <uart2_rxtx_init+0xdc>)
 8000378:	f000 f840 	bl	80003fc <uart_set_baudrate>

	//Configure transfer direction
	USART2->CR1 = (CR1_TE | CR1_RE); //enable transmitter and receiver
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <uart2_rxtx_init+0xdc>)
 800037e:	220c      	movs	r2, #12
 8000380:	60da      	str	r2, [r3, #12]

	//Enable uart module
	USART2->CR1 |= CR1_UE;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <uart2_rxtx_init+0xdc>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <uart2_rxtx_init+0xdc>)
 8000388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800038c:	60d3      	str	r3, [r2, #12]

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40023800 	.word	0x40023800
 8000398:	40020000 	.word	0x40020000
 800039c:	00f42400 	.word	0x00f42400
 80003a0:	40004400 	.word	0x40004400

080003a4 <uart2_read>:

char uart2_read(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	//Make sure receive data register is empty
	while(!(USART2->SR & SR_TXE)){}
 80003a8:	bf00      	nop
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <uart2_read+0x24>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f9      	beq.n	80003aa <uart2_read+0x6>

	//return the data
	return USART2->DR ;
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <uart2_read+0x24>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	b2db      	uxtb	r3, r3

}
 80003bc:	4618      	mov	r0, r3
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40004400 	.word	0x40004400

080003cc <uart2_write>:

void uart2_write(int ch)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	//Make sure transmit data register is empty
	while(!(USART2->SR & SR_RXNE)){}
 80003d4:	bf00      	nop
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <uart2_write+0x2c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <uart2_write+0xa>

	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <uart2_write+0x2c>)
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	6053      	str	r3, [r2, #4]

}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40004400 	.word	0x40004400

080003fc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClock ,uint32_t BaudRate)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClock,BaudRate);
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	68b8      	ldr	r0, [r7, #8]
 800040c:	f000 f808 	bl	8000420 <compute_uart_bd>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	609a      	str	r2, [r3, #8]
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClock , uint32_t BaudRate)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
	return ((PeriphClock + (BaudRate/2U))/BaudRate);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	085a      	lsrs	r2, r3, #1
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	fbb2 f3f3 	udiv	r3, r2, r3
 8000438:	b29b      	uxth	r3, r3
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000480 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800044e:	490e      	ldr	r1, [pc, #56]	; (8000488 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000450:	4a0e      	ldr	r2, [pc, #56]	; (800048c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000464:	4c0b      	ldr	r4, [pc, #44]	; (8000494 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000472:	f7ff ff15 	bl	80002a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000476:	f000 f825 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800047a:	f7ff fead 	bl	80001d8 <main>
  bx  lr    
 800047e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800048c:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 8000490:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000494:	20000028 	.word	0x20000028

08000498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC_IRQHandler>
	...

0800049c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_IncTick+0x20>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_IncTick+0x24>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4413      	add	r3, r2
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_IncTick+0x24>)
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	20000000 	.word	0x20000000
 80004c0:	20000024 	.word	0x20000024

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	4d0d      	ldr	r5, [pc, #52]	; (80004fc <__libc_init_array+0x38>)
 80004c8:	4c0d      	ldr	r4, [pc, #52]	; (8000500 <__libc_init_array+0x3c>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	2600      	movs	r6, #0
 80004d0:	42a6      	cmp	r6, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	4d0b      	ldr	r5, [pc, #44]	; (8000504 <__libc_init_array+0x40>)
 80004d6:	4c0c      	ldr	r4, [pc, #48]	; (8000508 <__libc_init_array+0x44>)
 80004d8:	f000 f818 	bl	800050c <_init>
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	2600      	movs	r6, #0
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ec:	4798      	blx	r3
 80004ee:	3601      	adds	r6, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f6:	4798      	blx	r3
 80004f8:	3601      	adds	r6, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000524 	.word	0x08000524
 8000500:	08000524 	.word	0x08000524
 8000504:	08000524 	.word	0x08000524
 8000508:	08000528 	.word	0x08000528

0800050c <_init>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr

08000518 <_fini>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr
