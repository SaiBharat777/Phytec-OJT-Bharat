
Board to boardHalfDuplex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000378  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000510  08000510  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000510  08000510  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000510  08000510  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000510  08000510  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000510  08000510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000518  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800051c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800051c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001472  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000054d  00000000  00000000  000214a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  000219f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f4e  00000000  00000000  00021d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f5e  00000000  00000000  00035cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000806a6  00000000  00000000  00037c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b82e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  000b8334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004f8 	.word	0x080004f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004f8 	.word	0x080004f8

080001d8 <main>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);



int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	char c;

	usart1_init();
 80001de:	f000 f80b 	bl	80001f8 <usart1_init>

	uart6_init();
 80001e2:	f000 f851 	bl	8000288 <uart6_init>

	while(1)
	{
		c = uart6_read();
 80001e6:	f000 f8bd 	bl	8000364 <uart6_read>
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
		  usart1_write(c);
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f8cb 	bl	800038c <usart1_write>
		c = uart6_read();
 80001f6:	e7f6      	b.n	80001e6 <main+0xe>

080001f8 <usart1_init>:
	return 0;
}


void usart1_init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
    /****************Configure usart1 gpio pin***************/
    /*Enable clock access to gpioa */
    RCC->AHB1ENR |= GPIOAEN;
 80001fc:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <usart1_init+0x80>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <usart1_init+0x80>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6313      	str	r3, [r2, #48]	; 0x30

    /*Set PA9 mode to alternate function mode*/
    GPIOA->MODER  |= PA9MOD;
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <usart1_init+0x84>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <usart1_init+0x84>)
 800020e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000212:	6013      	str	r3, [r2, #0]

    /*Set PA10 mode to alternate function mode*/
    GPIOA->MODER  |= PA10MOD;
 8000214:	4b19      	ldr	r3, [pc, #100]	; (800027c <usart1_init+0x84>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a18      	ldr	r2, [pc, #96]	; (800027c <usart1_init+0x84>)
 800021a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800021e:	6013      	str	r3, [r2, #0]

    /*Set PA9 alternate function type to USART1_TX (AF07)*/
    GPIOA->AFR[1] |= PA9AF;
 8000220:	4b16      	ldr	r3, [pc, #88]	; (800027c <usart1_init+0x84>)
 8000222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000224:	4a15      	ldr	r2, [pc, #84]	; (800027c <usart1_init+0x84>)
 8000226:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800022a:	6253      	str	r3, [r2, #36]	; 0x24

    /*Set PA10 alternate function type to USART1_RX (AF07)*/
    GPIOA->AFR[1] |= PA10AF;
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <usart1_init+0x84>)
 800022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000230:	4a12      	ldr	r2, [pc, #72]	; (800027c <usart1_init+0x84>)
 8000232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000236:	6253      	str	r3, [r2, #36]	; 0x24

    /****************Configure usart1 module ***************/
    /*Enable clock access to usart1 */
    RCC->APB2ENR |= APB2EN;
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <usart1_init+0x80>)
 800023a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <usart1_init+0x80>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6453      	str	r3, [r2, #68]	; 0x44

    /*Configure baudrate*/
    uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 8000244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000248:	490d      	ldr	r1, [pc, #52]	; (8000280 <usart1_init+0x88>)
 800024a:	480e      	ldr	r0, [pc, #56]	; (8000284 <usart1_init+0x8c>)
 800024c:	f000 f864 	bl	8000318 <uart_set_baudrate>

    /*Configure the transfer direction*/
    USART1->CR1 |= USART1_TX;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <usart1_init+0x8c>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a0b      	ldr	r2, [pc, #44]	; (8000284 <usart1_init+0x8c>)
 8000256:	f043 0310 	orr.w	r3, r3, #16
 800025a:	60d3      	str	r3, [r2, #12]

    /*Configure the transfer direction*/
    USART1->CR1 |= USART1_RX;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <usart1_init+0x8c>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a08      	ldr	r2, [pc, #32]	; (8000284 <usart1_init+0x8c>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	60d3      	str	r3, [r2, #12]

    /*Enable usart1 module*/
    USART1->CR1 |= USART1EN;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <usart1_init+0x8c>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a05      	ldr	r2, [pc, #20]	; (8000284 <usart1_init+0x8c>)
 800026e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000272:	60d3      	str	r3, [r2, #12]
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000
 8000280:	00f42400 	.word	0x00f42400
 8000284:	40011000 	.word	0x40011000

08000288 <uart6_init>:



void uart6_init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0

	/****************Configure uart gpio pin***************/
		/*Enable clock access to gpioa */
	    RCC->AHB1ENR |= GPIOAEN;
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <uart6_init+0x80>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a1d      	ldr	r2, [pc, #116]	; (8000308 <uart6_init+0x80>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6313      	str	r3, [r2, #48]	; 0x30

    	/*Set PA11 mode to alternate function mode*/
	    GPIOA->MODER  |= PA11MOD;
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <uart6_init+0x84>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <uart6_init+0x84>)
 800029e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a2:	6013      	str	r3, [r2, #0]

		/*Set PA12 mode to alternate function mode*/
	    GPIOA->MODER  |= PA12MOD;
 80002a4:	4b19      	ldr	r3, [pc, #100]	; (800030c <uart6_init+0x84>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a18      	ldr	r2, [pc, #96]	; (800030c <uart6_init+0x84>)
 80002aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ae:	6013      	str	r3, [r2, #0]

    	/*Set PA11 alternate function type to UART_TX (AF07)*/
	    GPIOA->AFR[1] |= PA11AF;
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <uart6_init+0x84>)
 80002b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b4:	4a15      	ldr	r2, [pc, #84]	; (800030c <uart6_init+0x84>)
 80002b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ba:	6253      	str	r3, [r2, #36]	; 0x24

		/*Set PA12 alternate function type to UART_TX (AF07)*/
	    GPIOA->AFR[1] |= PA12AF;
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <uart6_init+0x84>)
 80002be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c0:	4a12      	ldr	r2, [pc, #72]	; (800030c <uart6_init+0x84>)
 80002c2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80002c6:	6253      	str	r3, [r2, #36]	; 0x24

		/****************Configure uart module ***************/
		/*Enable clock access to uart2 */
         RCC->APB2ENR |= APB2EN;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <uart6_init+0x80>)
 80002ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002cc:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <uart6_init+0x80>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6453      	str	r3, [r2, #68]	; 0x44

		/*Configure baudrate*/
		uart_set_baudrate(USART6,APB2_CLK,UART_BAUDRATE);
 80002d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d8:	490d      	ldr	r1, [pc, #52]	; (8000310 <uart6_init+0x88>)
 80002da:	480e      	ldr	r0, [pc, #56]	; (8000314 <uart6_init+0x8c>)
 80002dc:	f000 f81c 	bl	8000318 <uart_set_baudrate>
		//USART2->BRR = ((APB1_CLK + (BaudRate/2U))/BaudRate) ;

		/*Configure the transfer direction*/
		USART6->CR1 |= USART6_TX;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <uart6_init+0x8c>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <uart6_init+0x8c>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	60d3      	str	r3, [r2, #12]

        /*Configure the transfer direction*/
    	USART6->CR1 |= USART6_RX;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <uart6_init+0x8c>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <uart6_init+0x8c>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	60d3      	str	r3, [r2, #12]

		/*Enable uart module*/
        USART6->CR1 |= USART6EN;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <uart6_init+0x8c>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a05      	ldr	r2, [pc, #20]	; (8000314 <uart6_init+0x8c>)
 80002fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000302:	60d3      	str	r3, [r2, #12]

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	00f42400 	.word	0x00f42400
 8000314:	40011400 	.word	0x40011400

08000318 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000324:	6879      	ldr	r1, [r7, #4]
 8000326:	68b8      	ldr	r0, [r7, #8]
 8000328:	f000 f808 	bl	800033c <compute_uart_bd>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	609a      	str	r2, [r3, #8]
}
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	085a      	lsrs	r2, r3, #1
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	441a      	add	r2, r3
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	b29b      	uxth	r3, r3
}
 8000356:	4618      	mov	r0, r3
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
	...

08000364 <uart6_read>:




char uart6_read(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /*Make sure the transmit data register is empty*/
	while(!(USART6->SR & SR_RXNE)){}
 8000368:	bf00      	nop
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <uart6_read+0x24>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f003 0320 	and.w	r3, r3, #32
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <uart6_read+0x6>

  /*Write to transmit data register*/
	return USART6->DR;
 8000376:	4b04      	ldr	r3, [pc, #16]	; (8000388 <uart6_read+0x24>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	b2db      	uxtb	r3, r3
}
 800037c:	4618      	mov	r0, r3
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40011400 	.word	0x40011400

0800038c <usart1_write>:



void usart1_write(int ch)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 8000394:	bf00      	nop
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <usart1_write+0x2c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f9      	beq.n	8000396 <usart1_write+0xa>

  /*Write to transmit data register*/
	USART1->DR	= (ch & 0xFF);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <usart1_write+0x2c>)
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	6053      	str	r3, [r2, #4]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40011000 	.word	0x40011000

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <NMI_Handler+0x4>

080003c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <HardFault_Handler+0x4>

080003c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <MemManage_Handler+0x4>

080003ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <BusFault_Handler+0x4>

080003d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <UsageFault_Handler+0x4>

080003da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000408:	f000 f83e 	bl	8000488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}

08000410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <SystemInit+0x20>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <SystemInit+0x20>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800046c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800043a:	490e      	ldr	r1, [pc, #56]	; (8000474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800043c:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000450:	4c0b      	ldr	r4, [pc, #44]	; (8000480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800045e:	f7ff ffd7 	bl	8000410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000462:	f000 f825 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000466:	f7ff feb7 	bl	80001d8 <main>
  bx  lr    
 800046a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800046c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000478:	08000518 	.word	0x08000518
  ldr r2, =_sbss
 800047c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000480:	20000024 	.word	0x20000024

08000484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_IncTick+0x20>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_IncTick+0x24>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_IncTick+0x24>)
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000020 	.word	0x20000020

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	4d0d      	ldr	r5, [pc, #52]	; (80004e8 <__libc_init_array+0x38>)
 80004b4:	4c0d      	ldr	r4, [pc, #52]	; (80004ec <__libc_init_array+0x3c>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	2600      	movs	r6, #0
 80004bc:	42a6      	cmp	r6, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	4d0b      	ldr	r5, [pc, #44]	; (80004f0 <__libc_init_array+0x40>)
 80004c2:	4c0c      	ldr	r4, [pc, #48]	; (80004f4 <__libc_init_array+0x44>)
 80004c4:	f000 f818 	bl	80004f8 <_init>
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	10a4      	asrs	r4, r4, #2
 80004cc:	2600      	movs	r6, #0
 80004ce:	42a6      	cmp	r6, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d8:	4798      	blx	r3
 80004da:	3601      	adds	r6, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e2:	4798      	blx	r3
 80004e4:	3601      	adds	r6, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000510 	.word	0x08000510
 80004ec:	08000510 	.word	0x08000510
 80004f0:	08000510 	.word	0x08000510
 80004f4:	08000514 	.word	0x08000514

080004f8 <_init>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr

08000504 <_fini>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr
