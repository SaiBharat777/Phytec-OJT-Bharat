
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003f8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080003fc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003fc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014fa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000569  00000000  00000000  0002152e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00021a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140b8  00000000  00000000  00021e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002520  00000000  00000000  00035ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805b0  00000000  00000000  000383f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b89a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000598  00000000  00000000  000b89f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003d8 	.word	0x080003d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080003d8 	.word	0x080003d8

080001d8 <pa1_adc_init>:
#include "adc.h"

void pa1_adc_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/***Configure the ADC GPIO pin ***/
    /*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b13      	ldr	r3, [pc, #76]	; (800022c <pa1_adc_init+0x54>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a12      	ldr	r2, [pc, #72]	; (800022c <pa1_adc_init+0x54>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA1 to analog*/
	GPIOA->MODER |= (3U<<2);
 80001e8:	4b11      	ldr	r3, [pc, #68]	; (8000230 <pa1_adc_init+0x58>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a10      	ldr	r2, [pc, #64]	; (8000230 <pa1_adc_init+0x58>)
 80001ee:	f043 030c 	orr.w	r3, r3, #12
 80001f2:	6013      	str	r3, [r2, #0]

	/***Configure the ADC module***/
	/*Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 80001f4:	4b0d      	ldr	r3, [pc, #52]	; (800022c <pa1_adc_init+0x54>)
 80001f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f8:	4a0c      	ldr	r2, [pc, #48]	; (800022c <pa1_adc_init+0x54>)
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6453      	str	r3, [r2, #68]	; 0x44

	/*Conversion sequence start*/
	ADC1->SQR3 |= ADC_CH1;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <pa1_adc_init+0x5c>)
 8000202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <pa1_adc_init+0x5c>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6353      	str	r3, [r2, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 |= ADC_SEQ_LEN_1;
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <pa1_adc_init+0x5c>)
 800020e:	4a09      	ldr	r2, [pc, #36]	; (8000234 <pa1_adc_init+0x5c>)
 8000210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000212:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_AD0N;
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <pa1_adc_init+0x5c>)
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <pa1_adc_init+0x5c>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6093      	str	r3, [r2, #8]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000
 8000234:	40012000 	.word	0x40012000

08000238 <start_converstion>:


void start_converstion(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	/*Start adc conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <start_converstion+0x1c>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a04      	ldr	r2, [pc, #16]	; (8000254 <start_converstion+0x1c>)
 8000242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000246:	6093      	str	r3, [r2, #8]
}
 8000248:	bf00      	nop
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	40012000 	.word	0x40012000

08000258 <adc_read>:



uint32_t adc_read(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 800025c:	bf00      	nop
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <adc_read+0x20>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f003 0302 	and.w	r3, r3, #2
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f9      	beq.n	800025e <adc_read+0x6>

	/*Read converted result*/
	return (ADC1->DR);
 800026a:	4b03      	ldr	r3, [pc, #12]	; (8000278 <adc_read+0x20>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800026e:	4618      	mov	r0, r3
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40012000 	.word	0x40012000

0800027c <main>:
#include "adc.h"

int adc_value;

int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	pa1_adc_init();
 8000280:	f7ff ffaa 	bl	80001d8 <pa1_adc_init>

	while(1)
	{
		start_converstion();
 8000284:	f7ff ffd8 	bl	8000238 <start_converstion>

		adc_value = adc_read();
 8000288:	f7ff ffe6 	bl	8000258 <adc_read>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b01      	ldr	r3, [pc, #4]	; (8000298 <main+0x1c>)
 8000292:	601a      	str	r2, [r3, #0]
		start_converstion();
 8000294:	e7f6      	b.n	8000284 <main+0x8>
 8000296:	bf00      	nop
 8000298:	20000020 	.word	0x20000020

0800029c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <NMI_Handler+0x4>

080002a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <HardFault_Handler+0x4>

080002a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <MemManage_Handler+0x4>

080002ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <BusFault_Handler+0x4>

080002b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <UsageFault_Handler+0x4>

080002ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e8:	f000 f83e 	bl	8000368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <SystemInit+0x20>)
 80002f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <SystemInit+0x20>)
 80002fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800034c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000330:	4c0b      	ldr	r4, [pc, #44]	; (8000360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800033e:	f7ff ffd7 	bl	80002f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000342:	f000 f825 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000346:	f7ff ff99 	bl	800027c <main>
  bx  lr    
 800034a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800034c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000358:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 800035c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000360:	20000028 	.word	0x20000028

08000364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_IncTick+0x20>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	461a      	mov	r2, r3
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <HAL_IncTick+0x24>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4413      	add	r3, r2
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <HAL_IncTick+0x24>)
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20000000 	.word	0x20000000
 800038c:	20000024 	.word	0x20000024

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	; (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	; (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	; (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
