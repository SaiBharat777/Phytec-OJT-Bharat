
I2C-Write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a4  080004a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004a4  080004a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004a4  080004a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a4  080004a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a4  080004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004ac  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004b0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014a9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000543  00000000  00000000  000214dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00021a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001408c  00000000  00000000  00021d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025b3  00000000  00000000  00035e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000804e3  00000000  00000000  000383d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b88ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000580  00000000  00000000  000b890c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800048c 	.word	0x0800048c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800048c 	.word	0x0800048c

080001d8 <I2C1_init>:
#include"i2c.h"

void I2C1_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 2; /* Enable GPIOB clock */
 80001dc:	4b29      	ldr	r3, [pc, #164]	; (8000284 <I2C1_init+0xac>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a28      	ldr	r2, [pc, #160]	; (8000284 <I2C1_init+0xac>)
 80001e2:	f043 0302 	orr.w	r3, r3, #2
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= 0x00200000; /* Enable I2C1 clock */
 80001e8:	4b26      	ldr	r3, [pc, #152]	; (8000284 <I2C1_init+0xac>)
 80001ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001ec:	4a25      	ldr	r2, [pc, #148]	; (8000284 <I2C1_init+0xac>)
 80001ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001f2:	6413      	str	r3, [r2, #64]	; 0x40

	/* configure PB8, PB9 pins for I2C1 */
    GPIOB->AFR[1] &= ~0x000000FF; /* PB8, PB9 I2C1 SCL, SDA */
 80001f4:	4b24      	ldr	r3, [pc, #144]	; (8000288 <I2C1_init+0xb0>)
 80001f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f8:	4a23      	ldr	r2, [pc, #140]	; (8000288 <I2C1_init+0xb0>)
 80001fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001fe:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->AFR[1] |= 0x00000044;
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <I2C1_init+0xb0>)
 8000202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000204:	4a20      	ldr	r2, [pc, #128]	; (8000288 <I2C1_init+0xb0>)
 8000206:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800020a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOB->MODER &= ~0x000F0000; /* PB8, PB9 use alternate function */
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <I2C1_init+0xb0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <I2C1_init+0xb0>)
 8000212:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000216:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 0x000A0000;
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <I2C1_init+0xb0>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1a      	ldr	r2, [pc, #104]	; (8000288 <I2C1_init+0xb0>)
 800021e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000222:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= 0x00000300; /* output open-drain */
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <I2C1_init+0xb0>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <I2C1_init+0xb0>)
 800022a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800022e:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~0x000F0000; /* with pull-ups */
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <I2C1_init+0xb0>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a14      	ldr	r2, [pc, #80]	; (8000288 <I2C1_init+0xb0>)
 8000236:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800023a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= 0x00050000;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <I2C1_init+0xb0>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a11      	ldr	r2, [pc, #68]	; (8000288 <I2C1_init+0xb0>)
 8000242:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000246:	60d3      	str	r3, [r2, #12]

    /* this funtion writes a byte of data to the memory location maddr of */

    I2C1->CR1 = 0x8000; /* software reset I2C1 */
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <I2C1_init+0xb4>)
 800024a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800024e:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~0x8000;    /* out of reset */
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <I2C1_init+0xb4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a0d      	ldr	r2, [pc, #52]	; (800028c <I2C1_init+0xb4>)
 8000256:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800025a:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 0x0010;     /* peripheral clock is 16 MHz*/
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <I2C1_init+0xb4>)
 800025e:	2210      	movs	r2, #16
 8000260:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;     /* standard mode, 100kHz clock */
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <I2C1_init+0xb4>)
 8000264:	2250      	movs	r2, #80	; 0x50
 8000266:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;     /* maximum rise time */
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <I2C1_init+0xb4>)
 800026a:	2211      	movs	r2, #17
 800026c:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= 0x0001;    /* enable I2C1 module */
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <I2C1_init+0xb4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a06      	ldr	r2, [pc, #24]	; (800028c <I2C1_init+0xb4>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6013      	str	r3, [r2, #0]
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40023800 	.word	0x40023800
 8000288:	40020400 	.word	0x40020400
 800028c:	40005400 	.word	0x40005400

08000290 <I2C1_byteWrite>:


int I2C1_byteWrite(char saddr, char maddr, char data)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
 800029a:	460b      	mov	r3, r1
 800029c:	71bb      	strb	r3, [r7, #6]
 800029e:	4613      	mov	r3, r2
 80002a0:	717b      	strb	r3, [r7, #5]
	volatile int tmp;

    while (I2C1->SR2 & 2); /* wait until bus not busy */
 80002a2:	bf00      	nop
 80002a4:	4b24      	ldr	r3, [pc, #144]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0302 	and.w	r3, r3, #2
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d1f9      	bne.n	80002a4 <I2C1_byteWrite+0x14>
    I2C1->CR1 |= 0x100; /* generate start */
 80002b0:	4b21      	ldr	r3, [pc, #132]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a20      	ldr	r2, [pc, #128]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & 1));/* wait until start flag is set */
 80002bc:	bf00      	nop
 80002be:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d0f9      	beq.n	80002be <I2C1_byteWrite+0x2e>
    I2C1->DR = saddr << 1; /* transmit slave address */
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	005a      	lsls	r2, r3, #1
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002d0:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & 2)); /* wait until addr flag is set */
 80002d2:	bf00      	nop
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	f003 0302 	and.w	r3, r3, #2
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d0f9      	beq.n	80002d4 <I2C1_byteWrite+0x44>
    tmp = I2C1->SR2; /*clear addr flag */
 80002e0:	4b15      	ldr	r3, [pc, #84]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	60fb      	str	r3, [r7, #12]
    while (!(I2C1->SR1 & 0x80)); /* wait until data register empty */
 80002e6:	bf00      	nop
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <I2C1_byteWrite+0x58>
    I2C1->DR = maddr; /* send memory address */
 80002f4:	4a10      	ldr	r2, [pc, #64]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & 0x80)); /* wait until data register empty */
 80002fa:	bf00      	nop
 80002fc:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <I2C1_byteWrite+0xa8>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <I2C1_byteWrite+0x6c>
    I2C1->DR = data; /* transmit data */
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <I2C1_byteWrite+0xa8>)
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & 4)); /* wait until transfer finished */
 800030e:	bf00      	nop
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <I2C1_byteWrite+0xa8>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <I2C1_byteWrite+0x80>
    I2C1->CR1 |= 0x200; /* generate stop */
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <I2C1_byteWrite+0xa8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a05      	ldr	r2, [pc, #20]	; (8000338 <I2C1_byteWrite+0xa8>)
 8000322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000326:	6013      	str	r3, [r2, #0]

    return 0;
 8000328:	2300      	movs	r3, #0

}
 800032a:	4618      	mov	r0, r3
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40005400 	.word	0x40005400

0800033c <main>:
#include"i2c.h"

int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	I2C1_init();
 8000340:	f7ff ff4a 	bl	80001d8 <I2C1_init>
    I2C1_byteWrite(SLAVE_ADDR, 0x0E, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	210e      	movs	r1, #14
 8000348:	2068      	movs	r0, #104	; 0x68
 800034a:	f7ff ffa1 	bl	8000290 <I2C1_byteWrite>

    while(1)
 800034e:	e7fe      	b.n	800034e <main+0x12>

08000350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <NMI_Handler+0x4>

08000356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <HardFault_Handler+0x4>

0800035c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <MemManage_Handler+0x4>

08000362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <BusFault_Handler+0x4>

08000368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <UsageFault_Handler+0x4>

0800036e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039c:	f000 f83e 	bl	800041c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000400 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003ce:	490e      	ldr	r1, [pc, #56]	; (8000408 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003e4:	4c0b      	ldr	r4, [pc, #44]	; (8000414 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003f2:	f7ff ffd7 	bl	80003a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003f6:	f000 f825 	bl	8000444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003fa:	f7ff ff9f 	bl	800033c <main>
  bx  lr    
 80003fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800040c:	080004ac 	.word	0x080004ac
  ldr r2, =_sbss
 8000410:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000414:	20000024 	.word	0x20000024

08000418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC_IRQHandler>
	...

0800041c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <HAL_IncTick+0x20>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_IncTick+0x24>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4413      	add	r3, r2
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_IncTick+0x24>)
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20000000 	.word	0x20000000
 8000440:	20000020 	.word	0x20000020

08000444 <__libc_init_array>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	4d0d      	ldr	r5, [pc, #52]	; (800047c <__libc_init_array+0x38>)
 8000448:	4c0d      	ldr	r4, [pc, #52]	; (8000480 <__libc_init_array+0x3c>)
 800044a:	1b64      	subs	r4, r4, r5
 800044c:	10a4      	asrs	r4, r4, #2
 800044e:	2600      	movs	r6, #0
 8000450:	42a6      	cmp	r6, r4
 8000452:	d109      	bne.n	8000468 <__libc_init_array+0x24>
 8000454:	4d0b      	ldr	r5, [pc, #44]	; (8000484 <__libc_init_array+0x40>)
 8000456:	4c0c      	ldr	r4, [pc, #48]	; (8000488 <__libc_init_array+0x44>)
 8000458:	f000 f818 	bl	800048c <_init>
 800045c:	1b64      	subs	r4, r4, r5
 800045e:	10a4      	asrs	r4, r4, #2
 8000460:	2600      	movs	r6, #0
 8000462:	42a6      	cmp	r6, r4
 8000464:	d105      	bne.n	8000472 <__libc_init_array+0x2e>
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	f855 3b04 	ldr.w	r3, [r5], #4
 800046c:	4798      	blx	r3
 800046e:	3601      	adds	r6, #1
 8000470:	e7ee      	b.n	8000450 <__libc_init_array+0xc>
 8000472:	f855 3b04 	ldr.w	r3, [r5], #4
 8000476:	4798      	blx	r3
 8000478:	3601      	adds	r6, #1
 800047a:	e7f2      	b.n	8000462 <__libc_init_array+0x1e>
 800047c:	080004a4 	.word	0x080004a4
 8000480:	080004a4 	.word	0x080004a4
 8000484:	080004a4 	.word	0x080004a4
 8000488:	080004a8 	.word	0x080004a8

0800048c <_init>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	bf00      	nop
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr

08000498 <_fini>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr
